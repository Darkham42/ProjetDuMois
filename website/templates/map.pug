div#map.map-main.rounded-bottom

//- This runs on client
script.
	// Map init
	const map = new mapboxgl.Map({
		container: 'map',
		pitchWithRotate: false,
		dragRotate: false,
		hash: true,
		bounds: [-5.010, 41.212, 10.019, 51.234],
		style: !{JSON.stringify(mapstyle)}
	});

	map.addControl(new mapboxgl.NavigationControl({ showCompass: false }));

	// Alert for zoom/search
	class AlertControl {
		onAdd(map) {
			this._map = map;
			this._container = document.createElement('div');
			this._container.className = "mapboxgl-ctrl map-ctrl-custom"+(map.getZoom() >= 7 ? " d-none": "");
			this._container.textContent = 'Zoomez ou lancez une recherche pour commencer';

			this._map.on("zoom", e => {
				if(this._map.getZoom() >= 7) {
					this._container.classList.add("d-none");
				}
				else {
					this._container.classList.remove("d-none");
				}
			});

			return this._container;
		}

		onRemove() {
			this._container.parentNode.removeChild(this._container);
			this._map = undefined;
		}
	}

	map.addControl(new AlertControl(), "bottom-left");

	// Click on feature
	function getLinks(meta) {
		const elem = meta.elems && meta.elems.length > 0 && meta.elems[0];
		const newElem = meta.new_elems && meta.new_elems.length > 0 && meta.new_elems[0];

		// JOSM commands
		const josmHrefs = [ `#{CONFIG.JOSM_REMOTE_URL}/load_and_zoom?bottom=${meta.minlat}&top=${meta.maxlat}&right=${meta.maxlon}&left=${meta.minlon}${elem && "&select="+elem.type+elem.id || ""}&#{josmParams}` ];
		if(newElem) {
			josmHrefs.push(`#{CONFIG.JOSM_REMOTE_URL}/add_node?lon=${meta.lon}&lat=${meta.lat}&addtags=${encodeURIComponent(newElem.add.map(kv => kv.k+"="+kv.v).join("|"))}`);
		}

		return [
			{ title: "JOSM", hrefs: josmHrefs },
			{ title: "iD", href: `#{CONFIG.OSM_URL}/edit${elem && "?"+elem.type+"="+elem.id || ""}#map=20/${meta.lat}/${meta.lon}&#{idParams}` },
			{ title: "OSM", href: `#{CONFIG.OSM_URL}/${elem && elem.type+"/"+elem.id || ""}#map=18/${meta.lat}/${meta.lon}` },
			{ title: "Osmose", href: `#{CONFIG.OSMOSE_URL}/fr/error/${meta.uuid}` },
			{ title: "Mapillary", href: `#{CONFIG.MAPILLARY_URL}/app/?lat=${meta.lat}&lng=${meta.lon}&z=18` }
		];
	}

	function getDescription(feature) {
		const osmoseLabels = !{JSON.stringify(osmoseLabels)};
		const p = feature.properties;
		const resDiv = document.createElement("div");
		resDiv.innerHTML = `<span class="spinner-border text-primary" role="status"></span>`;

		// Retrieve metadata on Osmose API
		fetch(`#{CONFIG.OSMOSE_URL}/api/0.3beta/issue/${p.uuid}`)
		.then(res => res.json())
		.then(meta => {
			const title = osmoseLabels[`${meta.item}_${meta.class}`] || osmoseLabels[`${meta.item}_all`] || meta.title.auto;

			const links = getLinks(meta).map(l => {
				const linkDom = document.createElement("a");
				linkDom.appendChild(document.createTextNode(l.title));

				// Simple link
				if(l.href) {
					linkDom.href = l.href;
					linkDom.target = "_blank";
					linkDom.rel = "noopener";
				}
				// Several links (JOSM) : call one, wait 3s, call second...
				else if(l.hrefs) {
					linkDom.classList.add("pdm-link");
					linkDom.addEventListener("click", () => {
						const next = () => {
							const url = l.hrefs.shift();
							if(url) {
								fetch(url).then(() => setTimeout(next, 3000));
							}
						};
						next();
					});
				}

				return linkDom;
			});

			let tags = meta.new_elems && meta.new_elems.length > 0 ? meta.new_elems[0].add.map(kv => kv.k+"="+kv.v).join("\n") : "";
			if(tags.length > 0) {
				tags = `
					<div class="form-group m-0 mb-1">
						<label class="m-0" for="exampleFormControlTextarea1">Attributs</label>
						<textarea class="form-control form-control-sm" rows="3">${tags}</textarea>
					</div>`;
			}

			resDiv.innerHTML = `
				<h5 class="m-0">${title}</h5>
				<p class="m-0 mb-2">${meta.subtitle.auto}</p>
				${tags}`;

			const divLinks = document.createElement("div");
			divLinks.classList.add("text-center");
			links.forEach((l,i) => {
				if(i > 0) { divLinks.appendChild(document.createTextNode(" | ")); }
				divLinks.appendChild(l);
			});
			resDiv.appendChild(divLinks);
		});

		return resDiv;
	}

	function clickFeature(e) {
		if(!map || !e) { return; }
		const features = map.queryRenderedFeatures(e.point);
		if(!features || features.length === 0) { return; }

		const description = getDescription(features[0]);
		const coordinates = features[0].geometry.coordinates.slice();

		while (Math.abs(e.lngLat.lng - coordinates[0]) > 180) {
			coordinates[0] += e.lngLat.lng > coordinates[0] ? 360 : -360;
		}

		const popup = new mapboxgl.Popup().setLngLat(coordinates);
		if(typeof description === "string") { popup.setHTML(description); }
		else { popup.setDOMContent(description); }
		popup.addTo(map);
	}

	map.on("click", clickFeature);

//- Generate hover events for each layer dynamically on server
-
	const hoverEvents = mapstyle.layers
		.map(l => l.id)
		.map(id => `map.on('mouseenter', '${id}', () => { map.getCanvas().style.cursor = 'pointer'; });\nmap.on('mouseleave', '${id}', () => { map.getCanvas().style.cursor = ''; });`)
		.join("\n");

script !{hoverEvents}
