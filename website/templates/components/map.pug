div#map.map-main
div#zoom-in.alert.alert-warning.map-alert.font-weight-bold Zoomez ou lancez une recherche pour commencer
div#edit-feature-location.alert.alert-primary.map-alert.d-none
	| DÃ©placer la carte pour positionner l'objet Ã  crÃ©er
	div.btn-group.btn-block.mt-1
		button.btn.btn-success.w-50(role="button")
			i.fa.fa-check.mr-2
			| Valider
		button.btn.btn-warning.w-50(role="button")
			i.fa.fa-ban.mr-2
			| Annuler

//- This runs on client
script.
	const hasLocation = window.location.hash !== "";

	// Map init
	const map = new mapboxgl.Map({
		container: 'map',
		pitchWithRotate: false,
		dragRotate: false,
		hash: true,
		bounds: [-5.010, 41.212, 10.019, 51.234],
		style: !{JSON.stringify(mapstyle)}
	});

	map.addControl(new mapboxgl.NavigationControl({ showCompass: false }));

	// Add feature button
	if(editors.pdm && editors.pdm.add) {
		createAddFeatureButton(document.getElementById("legend-edit-button"), "btn-block");
	}

	// Geolocate
	const geoloc = new mapboxgl.GeolocateControl({ positionOptions: { enableHighAccuracy: true } });
	map.addControl(geoloc);
	if(!hasLocation) {
		map.on("load", () => geoloc.trigger());
	}

	// Alert for zoom/search
	const zoomAlert = document.getElementById("zoom-in");
	const toggleZoomAlert = () => {
		if(map.getZoom() >= 7) {
			zoomAlert.classList.add("d-none");
		}
		else {
			zoomAlert.classList.remove("d-none");
		}
	};
	toggleZoomAlert();
	map.on("zoom", toggleZoomAlert);

	// Button for KML exports
	class ExportControl {
		onAdd(map) {
			this._map = map;
			this._container = document.createElement('div');
			this._container.className = "mapboxgl-ctrl map-ctrl-btn";
			const osmoseLabels = !{JSON.stringify(osmoseLabels)};
			if(osmoseLabels && Object.keys(osmoseLabels).length > 0) {
				const [osmoseItem, osmoseClasses] = Object.keys(osmoseLabels)[0].split("_");
				const osmose_params = `item=${osmoseItem}&class=${osmoseClasses !== "all" ? osmoseClasses : ""}`
				const osmose_bbox = `${map.getBounds()._sw.lng}%2C${map.getBounds()._sw.lat}%2C${map.getBounds()._ne.lng}%2C${map.getBounds()._ne.lat}`
				const osmose_export_url = `#{CONFIG.OSMOSE_URL}/fr/errors.kml?zoom=${map.getZoom()}&${osmose_params}&bbox=${osmose_bbox}`;
				this._container.innerHTML = `<a title="TÃ©lÃ©charger un fichier KML pour contribuer depuis votre smartphone" href="${osmose_export_url}"> ðŸ“² </a>`;
				return this._container;
			}
			else {
				return document.createElement('div');
			}
		}
	}

	map.addControl(new ExportControl(), "top-right");

	// Display notes layers if any
	const notesSources = !{JSON.stringify(datasources.filter(ds => ds.source === "notes"))};
	function loadNotesOnMap() {
		if(notesSources.length > 0) {
			notesSources.forEach((noteSource, nsid) => {
				const promises = noteSource.terms.map(term => osmApi.fetchNotesSearch(term, 'json', 10000, 0));

				Promise.all(promises).then(results => {
					// Merge and dedupe notes
					const notes = { type: "FeatureCollection", features: [] };
					const existingNotesIds = [];

					results
					.map(res => JSON.parse(res))
					.forEach(res => {
						res.features.forEach(feature => {
							if(feature.properties.status === "open" && !existingNotesIds.includes(feature.properties.id)) {
								feature.properties.pdm_note_source = nsid;
								notes.features.push(feature);
								existingNotesIds.push(feature.properties.id);
							}
						});
					});

					// Add to map
					map.getSource(`notes_${nsid}`).setData(notes);
				});
			});
		}
	}
	loadNotesOnMap();

	// Show/hide feature marker
	let featureMarker;
	function showMarker(coords) {
		if(!coords && featureMarker) {
			featureMarker.remove();
			featureMarker = null;
		}
		else if(coords && featureMarker) {
			featureMarker.setLngLat(coords);
		}
		else if(coords) {
			featureMarker = new mapboxgl.Marker({ color: "red" }).setLngLat(coords).addTo(map);
		}
	}


	//
	// Marker for feature location
	//

	const markerEditorDom = document.getElementById("edit-feature-location");
	const markerEditorValidDom = markerEditorDom.querySelector(".btn-success");
	const markerEditorCancelDom = markerEditorDom.querySelector(".btn-warning");
	const mapMoveListener = e => showMarker(map.getCenter());
	let lastCallbackFeatureLocation = null;

	function cancelAskFeatureLocation() {
		markerEditorDom.classList.add("d-none");
		if(lastCallbackFeatureLocation) {
			markerEditorValidDom.removeEventListener("click", lastCallbackFeatureLocation);
			lastCallbackFeatureLocation = null;
			map.off("move", mapMoveListener);
			showMarker();
		}
	}

	function askFeatureLocation(callback) {
		if(lastCallbackFeatureLocation) { cancelAskFeatureLocation(); }
		window.dispatchEvent(new CustomEvent("pdm_sidebar_use", { detail: { close: true } }))
		markerEditorDom.classList.remove("d-none");

		// Move marker
		showMarker(map.getCenter());
		map.on("move", mapMoveListener);

		lastCallbackFeatureLocation = e => {
			callback(featureMarker.getLngLat());
			cancelAskFeatureLocation();
		};

		markerEditorValidDom.addEventListener("click", lastCallbackFeatureLocation);
	}

	markerEditorCancelDom.addEventListener("click", cancelAskFeatureLocation);


	//
	// Click on feature
	//

	// Handle map click
	function clickFeature(e) {
		if(!map || !e) { return; }
		const features = map.queryRenderedFeatures(e.point);

		if(!features || features.length === 0) {
			if(!lastCallbackFeatureLocation) {
				cancelAddNewFeature();
				showMarker();
			}
		}
		else {
			if(lastCallbackFeatureLocation) {
				cancelAskFeatureLocation();
			}
			cancelAddNewFeature(false, true);
			const coordinates = features[0].geometry.coordinates.slice();
			while (Math.abs(e.lngLat.lng - coordinates[0]) > 180) {
				coordinates[0] += e.lngLat.lng > coordinates[0] ? 360 : -360;
			}

			window.dispatchEvent(new CustomEvent("pdm_sidebar_use", { detail: { open: true, panel: "feature", feature: features[0] } }));
			showMarker(coordinates);
			map.flyTo({ center: coordinates, zoom: 18 });
		}
	}

	map.on("click", clickFeature);


//- Generate hover events for each layer dynamically on server
-
	const hoverEvents = mapstyle.layers
		.map(l => l.id)
		.map(id => `map.on('mouseenter', '${id}', () => { map.getCanvas().style.cursor = 'pointer'; });\nmap.on('mouseleave', '${id}', () => { map.getCanvas().style.cursor = ''; });`)
		.join("\n");

script !{hoverEvents}
