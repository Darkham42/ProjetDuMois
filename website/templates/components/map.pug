div#map.map-main
div.alert.alert-warning.map-alert.font-weight-bold.show-low-zoom Zoomez ou lancez une recherche pour commencer
div#edit-feature-location.alert.alert-primary.map-alert.d-none
	| Déplacer la carte pour positionner l'objet à créer
	div.btn-group.btn-block.mt-1
		button.btn.btn-success.w-50(role="button")
			i.fa.fa-check.mr-2
			| Valider
		button.btn.btn-warning.w-50(role="button")
			i.fa.fa-ban.mr-2
			| Annuler

//- This runs on client
script.
	const hasLocation = window.location.hash !== "";

	// Map init
	const map = new mapboxgl.Map({
		container: 'map',
		pitchWithRotate: false,
		dragRotate: false,
		hash: "map",
		bounds: [-5.010, 41.212, 10.019, 51.234],
		style: !{JSON.stringify(mapstyle)}
	});

	map.addControl(new mapboxgl.NavigationControl({ showCompass: false }));
	map.loadImage('/images/exclamation.png', (error, image) => {
		if (error) { console.error(error); }
		else { map.addImage('pdm-exclamation', image); }
	});

	// Add feature button
	createFeatureButton(document.body, "add", "btn-floating btn-primary hide-low-zoom", { mini: true });
	if(editors.pdm) {
		createFeatureButton(document.getElementById("legend-edit-button"), "add", "btn-block", { mapcoords: true, textnote: true });
	}

	// Geolocate
	const geoloc = new mapboxgl.GeolocateControl({ positionOptions: { enableHighAccuracy: true } });
	map.addControl(geoloc);
	if(!hasLocation) {
		map.on("load", () => geoloc.trigger());
	}

	// Alert for zoom/search
	const toggleZoomAlert = () => {
		if(map.getZoom() >= 7) {
			for(let d of document.querySelectorAll(".show-low-zoom")) {
				d.classList.add("d-none");
			}
			for(let d of document.querySelectorAll(".hide-low-zoom")) {
				d.classList.remove("d-none");
			}
		}
		else {
			for(let d of document.querySelectorAll(".show-low-zoom")) {
				d.classList.remove("d-none");
			}
			for(let d of document.querySelectorAll(".hide-low-zoom")) {
				d.classList.add("d-none");
			}
		}
	};
	toggleZoomAlert();
	map.on("zoom", toggleZoomAlert);

	// Button for switching between aerial imagery and map tiles
	class TilesControl {
		onAdd(map) {
			this._map = map;
			this._container = document.createElement('div');
			this._container.className = "mapboxgl-ctrl mapboxgl-ctrl-group";
			const btn = document.createElement("button");
			btn.type = "button";
			btn.title = "Afficher / masquer l'imagerie satellite";
			btn.classList.add("pdm-btn-layers");
			btn.innerHTML = `<i class="fa fa-layer-group" style="font-size: 18px"></i>`;

			btn.addEventListener("click", e => {
				if(!btn.classList.contains("pdm-btn-enabled")) {
					map.setLayoutProperty("bg_aerial", "visibility", "visible");
					btn.classList.add("pdm-btn-enabled");
				}
				else {
					map.setLayoutProperty("bg_aerial", "visibility", "none");
					btn.classList.remove("pdm-btn-enabled");
				}
			});

			this._container.appendChild(btn);
			return this._container;
		}
	}

	map.addControl(new TilesControl(), "top-right");

	// Display notes layers if any
	const notesSources = !{JSON.stringify(datasources.filter(ds => ds.source === "notes"))};
	const geojsonBounds = !{JSON.stringify(CONFIG.GEOJSON_BOUNDS)};

	function loadNotesOnMap() {
		if(notesSources.length > 0) {
			notesSources.forEach((noteSource, nsid) => {
				const promises = noteSource.terms.map(term => osmApi.fetchNotesSearch(term, 'json', 10000, 0));

				Promise.all(promises).then(results => {
					// Merge and dedupe notes
					const notes = { type: "FeatureCollection", features: [] };
					const existingNotesIds = [];

					results
					.map(res => JSON.parse(res))
					.forEach(res => {
						res.features.forEach(feature => {
							if(
								feature.properties.status === "open"
								&& !existingNotesIds.includes(feature.properties.id)
							) {
								existingNotesIds.push(feature.properties.id);
								if(booleanContains(geojsonBounds, feature)) {
									feature.properties.pdm_note_source = nsid;
									notes.features.push(feature);
								}
							}
						});
					});

					// Add to map
					map.getSource(`notes_${nsid}`).setData(notes);
				});
			});
		}
	}
	loadNotesOnMap();

	// Show/hide feature marker
	let featureMarker;
	function showMarker(coords) {
		if(!coords && featureMarker) {
			featureMarker.remove();
			featureMarker = null;
		}
		else if(coords && featureMarker) {
			featureMarker.setLngLat(coords);
		}
		else if(coords) {
			featureMarker = new mapboxgl.Marker({ color: "red" }).setLngLat(coords).addTo(map);
		}
	}


	//
	// Marker for feature location
	//

	const markerEditorDom = document.getElementById("edit-feature-location");
	const markerEditorValidDom = markerEditorDom.querySelector(".btn-success");
	const markerEditorCancelDom = markerEditorDom.querySelector(".btn-warning");
	const mapMoveListener = e => showMarker(map.getCenter());
	let lastCallbackFeatureLocation = null;

	function cancelAskFeatureLocation() {
		markerEditorDom.classList.add("d-none");
		if(lastCallbackFeatureLocation) {
			markerEditorValidDom.removeEventListener("click", lastCallbackFeatureLocation);
			lastCallbackFeatureLocation = null;
			map.off("move", mapMoveListener);
			showMarker();
		}
	}

	function askFeatureLocation(callback) {
		if(lastCallbackFeatureLocation) { cancelAskFeatureLocation(); }
		markerEditorDom.classList.remove("d-none");

		// Move marker
		showMarker(map.getCenter());
		if(map.getZoom() < 18) { map.flyTo({ zoom: 18 }); }
		map.on("move", mapMoveListener);

		lastCallbackFeatureLocation = e => {
			callback(featureMarker.getLngLat());
			cancelAskFeatureLocation();
		};

		markerEditorValidDom.addEventListener("click", lastCallbackFeatureLocation);
	}

	markerEditorCancelDom.addEventListener("click", cancelAskFeatureLocation);


	//
	// Click on feature
	//

	// Handle map click
	function onMapClick(e) {
		if(!map || !e) { return; }
		const features = map.queryRenderedFeatures(e.point);

		if(!features || features.length === 0) {
			if(!lastCallbackFeatureLocation) {
				cancelEdit();
				showMarker();
			}
		}
		else {
			if(lastCallbackFeatureLocation) {
				cancelAskFeatureLocation();
			}
			cancelEdit(false, true);

			// Deduplicate features
			for(let i=0; i < features.length; i++) {
				for(let j=0; j < i; j++) {
					if(features[i].source === features[j].source && (
						(features[i].properties.osm_id && features[j].properties.osm_id && features[i].properties.osm_id === features[j].properties.osm_id)
						|| (features[i].properties.uuid && features[j].properties.uuid && features[i].properties.uuid === features[j].properties.uuid)
						|| (features[i].properties.id && features[j].properties.id && features[i].properties.id === features[j].properties.id)
					)) {
						features.splice(i, 1);
						i--;
						break;
					}
				}
			}

			if(features.length > 1) {
				window.dispatchEvent(new CustomEvent("pdm_sidebar_use", { detail: { open: true, panel: "features", features: features } }));
			}
			else {
				showFeature(features[0], e)
			}
		}
	}

	// Display a certain feature
	function showFeature(feature, e) {
		const coordinates = feature.geometry.coordinates.slice();
		if(e) {
			while (Math.abs(e.lngLat.lng - coordinates[0]) > 180) {
				coordinates[0] += e.lngLat.lng > coordinates[0] ? 360 : -360;
			}
		}

		window.dispatchEvent(new CustomEvent("pdm_sidebar_use", { detail: { panel: "default", close: true } }));
		map.flyTo({ center: coordinates, zoom: Math.max(16, map.getZoom()), speed: 1.5 });
		map.once("moveend", () => {
			showMarker(coordinates);
			window.dispatchEvent(new CustomEvent("pdm_sidebar_use", { detail: { open: true, panel: "feature", feature: feature } }));
		});
	}

	map.on("click", onMapClick);


//- Generate hover events for each layer dynamically on server
-
	const hoverEvents = mapstyle.layers
		.map(l => l.id)
		.map(id => `map.on('mouseenter', '${id}', () => { map.getCanvas().style.cursor = 'pointer'; });\nmap.on('mouseleave', '${id}', () => { map.getCanvas().style.cursor = ''; });`)
		.join("\n");

script !{hoverEvents}
